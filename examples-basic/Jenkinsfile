#!groovy
@Library('imi-devops-shared-library-develop') _

pipeline {
    
    agent any
    
    tools { 
        maven 'MVN3'  
        jdk 'JDK8' 
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr:'60',numToKeepStr:'-1', artifactDaysToKeepStr: '30',artifactNumToKeepStr:'-1'))
    }
    

    parameters {
        string(name: 'URL_SCM', defaultValue: "https://git.cast-info.es/139/", description: 'Repositorio SCM de descarga del proyecto.')
        string(name: 'SCM_CREDENTIALS', defaultValue: "mruizc", description: 'Identificador credentials SCM.')
        string(name: 'SCM_BRANCH', defaultValue: "develop", description: 'Rama de desacarga SCM.')
        string(name: 'RELATIVE_PROJECT_TO_TEST', defaultValue: 'devopsstack/robotest/examples-basic/', description: 'ruta relativa del proyecto')
        string(name: 'ROBOTEST_JSON_CHOICE_LIST', defaultValue: 'src/integration-test/resources/robotest_test_choice_jenkins2.json', description: 'Fichero Json de robotest con la lista de posibles Suites y Cases para seleccionar')
        string(name: 'SELECTION_TEST_INPUT_TIMEOUT', defaultValue: '120', description: 'Timeout de espera para que el usuario seleccione los test, sino se ejecutar√°n todos')
    }      
     
    stages {
    
    
        stage('SCM') {
            steps {     
                git(
                    url: "${params.URL_SCM}",
                    credentialsId: "${params.SCM_CREDENTIALS}",
                    branch: "${params.SCM_BRANCH}" 
                )
            }               
        }
        
        stage('ROBOTEST SUITE/CASE CHOICE') {
            steps {
                robotestSuiteCaseSelector(this, "${params.SELECTION_TEST_INPUT_TIMEOUT}" , "${params.RELATIVE_PROJECT_TO_TEST}${params.ROBOTEST_JSON_CHOICE_LIST}")
            }               
        }
        
        stage('ROBOTEST RUN') {
            steps { 
                //parallel (
                  //  "Firefox" : {
                         //robotestRunner(this, "${params.RELATIVE_PROJECT_TO_TEST}/pom.xml", 'true','FIREFOX') 
                    //},
                    //"Chrome" : {
                         robotestRunner(this, "${params.RELATIVE_PROJECT_TO_TEST}/pom.xml", 'false','CHROME') 
                    //}
                //)
            }
            post {
                always {
                      junit "${params.RELATIVE_PROJECT_TO_TEST}/target/failsafe-reports/*.xml"
                      publishHTML(target: [
                                      allowMissing: false,
                                      alwaysLinkToLastBuild: false,
                                      keepAll: true,
                                      reportDir: "${params.RELATIVE_PROJECT_TO_TEST}/target/failsafe-reports/robotest-suite-reports/",
                                      reportFiles: 'index.html',
                                      reportName: 'ROBOTEST'
                                 ])
                      cleanWs()
                }
            }   
            
        }

     }
}

